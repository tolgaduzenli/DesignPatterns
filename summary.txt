Chapter 1 (Strategy Pattern)
    Bullet Points;
        1- Knowing OO basics does not make you a good designer.
        2- Good OO designs are reusable, extensible, and maintainable.
        3- Patterns show you how to build system with good OO design qualities.
        4- Patterns are proven object oriented experience.
        5- Patterns dont give you code, they give you general solution to design problems. You apply them to your specific application.
        6- Patterns are not invented, they are discovered.
        7- Most patterns allow some part of system to vary independently of all other parts.
        8- We often try to take what varies in a system and encapsulate it.
        9- Patterns provide a shared language that can maximize the value of your communication with other developers.

    Disadvantages of using subclass to provide specific duck behavior.
        A. Code is duplicated across subclass. (YES)
            Cause: same behavior will be in more than one duck class, like flyWithWings. RedDuck and MallardDuck have same behavior.
        B. Runtime behavior changes are difficult. (YES)
            Cause: flyWithWings can not be flyWithRocket in the runtime. It should be in another fly method before runtime.
        C. We can not make duck dance. (NO)
            Cause: new method in duck class is enough as a dance.
        D. Hard to gain knowledge of all duck behavior. (YES)
            Cause: All subclasses have to implement all behaviors to gain those knowledge.
        E. Ducks can not fly and quack at the same time. (NO)
            Cause: using fly and quack methods at the same time is enough.
        F. Changes can unintentionally affect other ducks.(YES)
            Cause: When we add new behavior method in duck class, subclasses have to implement this new method.
    Key point : Program to interface not an implementation.

Chapter 2 (Observer Patter)
    BULLET POINTS
        1- The Observer Pattern defines a one-to-many relationship between objects.
        2- Subjects, or as we also know them, Observables, update Observers using a common interface.
        3- Observers are loosely coupled in that the Observable knows nothing about them, other than that they implement the Observer interface.
        4- You can push or pull data from the Observable when using the pattern (pull is considered more “correct”).
        5- Don’t depend on a specific order of notification for your Observers.
        6- Java has several implementations of the Observer Pattern, including the general purpose java.util.Observable.
        7- Watch out for issues with the java.util.Observable implementation.
        8- Don’t be afraid to create your own Observable implementation if needed.
        9- Swing makes heavy use of the Observer Pattern, as do many GUI frameworks.
        10- You’ll also find the pattern in many other places, including JavaBeans and RMI.
    Disadvantages of using concrete class instead of subject and observer interface.
        A.We are coding to concrete implementations, not interfaces. (YES)
        B.For every new display element we need to alter code. (YES)
        C.We have no way to add display elements at run time. (YES)
        D.The display elements don’t implement a common interface. (NO)
        E.We haven’t encapsulated what changes. (YES)
        F.We are violating encapsulation of the WeatherData class. (NO)
    DESIGN PRINCIPLE CHALLENGE SOLUTION
        Identify the aspects of your application that vary and separate them from what stays the same.
            The thing that varies in the Observer Pattern is the state of the Subject and the number and types of Observers. With this pattern, you can
            vary the objects that are dependent on the state of the Subject, without having to change that Subject. That’s called planning ahead!
        Program to an interface, not an implementation.
            Both the Subject and Observer use interfaces. The Subject keeps track of objects implementing the Observer interface, while the observers
            register with, and get notified by, the Subject interface. As we’ve seen, this keeps things nice and loosely coupled
        Favor composition over inheritance.
            The Observer Pattern uses composition to compose any number of Observers with their Subjects.
            These relationships aren’t set up by some kind of inheritance hierarchy. No, they are set up at runtime by composition!

Chapter 3 (Decorator Patter)
    BULLET POINTS
        1- Inheritance is one form of extension, but not necessarily the best way to achieve flexibility in our designs.
        2- In our designs we should allow behavior to be extended without the need to modify existing code.
        3- Composition and delegation can often be used to add new behaviors at runtime.
        4- The Decorator Pattern provides an alternative to sub-classing for extending behavior.
        5- The Decorator Pattern involves a set of decorator classes that are used to wrap concrete components.
        6- Decorator classes mirror the type of the components they decorate. (In fact, they are the same type as the components they decorate, either through inheritance or interface implementation.)
        7- Decorators change the behavior of their components by adding new functionality before and/or after (or even in place of) method calls to the component.
        8- You can wrap a component with any number of decorators.
        9- Decorators are typically transparent to the client of the component; that is, unless the client is relying on the component’s concrete type.
        10- Decorators can result in many small objects in our design, and overuse can be complex.

Chapter 4 (Factory & Abstract Factory Pattern)
    BULLET POINTS
        1- All factories encapsulate object creation.
        2- Simple Factory, while not a bona-fide design pattern, is a simple way to decouple your clients from concrete classes.
        3- Factory Method relies on inheritance: object creation is delegated to subclasses, which implement the factory method to create objects.
        4- Abstract Factory relies on object composition: object creation is implemented in methods exposed in the factory interface.
        5- All factory patterns promote loose coupling by reducing the dependency of your application on concrete classes.
        6- The intent of Factory Method is to allow a class to defer instantiation to its subclasses.
        7- The intent of Abstract Factory is to create families of related objects without having to depend on their concrete classes.
        8- The Dependency Inversion Principle guides us to avoid dependencies on concrete types and to strive for abstractions.
        9- Factories are a powerful technique for coding to abstractions, not concrete classes.

Chapter 5 (Singleton Pattern)
    BULLET POINTS
        1- The Singleton Pattern ensures you have at most one instance of a class in your application.
        2- The Singleton Pattern also provides a global access point to that instance.
        3- Java’s implementation of the Singleton Pattern makes use of a private constructor, a static method combined with a static variable.
        4- Examine your performance and resource constraints and carefully choose an appropriate Singleton implementation for multithreaded applications (and we should consider all applications multithreaded!).
        5- Beware of the double-checked locking implementation; it is not thread-safe in versions before Java 2, version 5.
        6- Be careful if you are using multiple class loaders; this could defeat the Singleton implementation and result in multiple instances.
        7- If you are using a JVM earlier than 1.2, you’ll need to create a registry of Singletons to defeat the garbage collector.

    MultiThreading
        Synchronize the getInstance() method:
            A straightforward technique that is guaranteed to work. We don’t seem to have
            any performance concerns with the chocolate boiler, so this would be a good choice.
        Use eager instantiation:
            We are always going to instantiate the chocolate boiler in our code, so statically initializing
            the instance would cause no concerns. This solution would work as well as the synchronized
            method, although perhaps be less obvious to a developer familiar with the standard pattern.
        Double-checked locking:
            Given we have no performance concerns, double-checked locking seems like overkill. In
            addition, we’d have to ensure that we are running at least Java

Chapter 6 (Command Pattern)
    BULLET POINTS
        1- The Command Pattern decouples an object making a request from the one that knows how to perform it.
        2- A Command object is at the center of this decoupling and encapsulates a receiver with an action (or set of actions) .
        3- An invoker makes a request of a Command object by calling its execute() method, which invokes those actions on the receiver.
        4- Invokers can be parameterized with Commands, even dynamically at runtime.
        5- Commands may support undo by implementing an undo method that restores the object to its previous state before the execute() method was last called.
        6- Macro Commands are a simple extension of Command that allow multiple commands to be invoked. Likewise, Macro Commands can easily support undo().
        7- In practice, it is not uncommon for “smart” Command objects to implement the request themselves rather than delegating to a receiver.
        8- Commands may also be used to implement logging and transactional systems.

Chapter 7 (Adapter and Facade Pattern)
    BULLET POINTS
        1- When you need to use an existing class and its interface is not the one you need, use an adapter.
        2- When you need to simplify and unify a large interface or complex set of interfaces, use a facade.
        3- An adapter changes an interface into one a client expects.
        4- A facade decouples a client from a complex subsystem.
        5- Implementing an adapter may require little work or a great deal of work depending on the size and complexity of the target interface.
        6- Implementing a facade requires that we compose the facade with its subsystem and use delegation to perform the work of the facade.
        7- There are two forms of the Adapter Pattern: object and class adapters. Class adapters require multiple inheritance.
        8- You can implement more than one facade for a subsystem.
        9- An adapter wraps an object to change its interface, a decorator wraps an object to add new behaviors and responsibilities, and a facade “wraps” a set of objects to simplify.

Chapter 8 (Template Pattern)
    BULLET POINTS
        1- A “template method” defines the steps of an algorithm, deferring to subclasses for the implementation of those steps.
        2- The Template Method Pattern gives us an important technique for code reuse.
        3- The template method’s abstract class may define concrete methods, abstract methods, and hooks.
        4- Abstract methods are implemented by subclasses.
        5- Hooks are methods that do nothing or default behavior in the abstract class, but may be overridden in the subclass.
        6- To prevent subclasses from changing the algorithm in the template method, declare the template method as final.
        7- The Hollywood Principle guides us to put decision making in high-level modules that can decide how and when to call low-level modules.
        8- You’ll see lots of uses of the Template Method Pattern in real-world code, but don’t expect it all (like any pattern) to be designed “by the book.”
        9- The Strategy and Template Method Patterns both encapsulate algorithms, one by inheritance and one by composition.
        10- The Factory Method is a specialization of Template Method.

Chapter 9 (Iterator and Composite Pattern)
    BULLET POINTS
        1- An Iterator allows access to an aggregate’s elements without exposing its internal structure.
        2- An Iterator takes the job of iterating over an aggregate and encapsulates it in another object.
        3- When using an Iterator, we relieve the aggregate of the responsibility of supporting operations for traversing its data.
        4- An Iterator provides a common interface for traversing the items of an aggregate, allowing you to use polymorphism when writing code that makes use of the items of the aggregate.
        5- We should strive to assign only one responsibility to each class.
        6- The Composite Pattern provides a structure to hold both individual objects and composites.
        7- The Composite Pattern allows clients to treat composites and individual objects uniformly.
        8- A Component is any object in a Composite structure. Components may be other composites or leaf nodes.
        9- There are many design tradeoffs in implementing Composite. You need to balance transparency and safety with your needs.

    Pattern description matches
        Strategy; Encapsulate interchangeable behaviours and uses delegation to decide which one to use.
        Adapter; Change the interface of one or more classes.
        Iterator; Provides a way to traverse a collection of objects without exposing the collection's implementation.
        Facade; Simplifies the interface of a group of classes.
        Composite; Clients treat collections of objects and individual objects uniformly.
        Observer; Allows a group of objects to notified when some state changes.

Chapter 10 State Pattern
    BULLET POINTS
        1- The State Pattern allows an object to have many different behaviors that are based on its internal state.
        2- Unlike a procedural state machine, the State Pattern represents state as a full-blown class.
        3- The Context gets its behavior by delegating to the current state object it is composed with.
        4- By encapsulating each state into a class, we localize any changes that will need to be made.
        5- The State and Strategy Patterns have the same class diagram, but they differ in intent.
        6- Strategy Pattern typically configures Context classes with a behavior or algorithm.
        7- State Pattern allows a Context to change its behavior as the state of the Context changes.
        8- State transitions can be controlled by the State classes or by the Context classes.
        9- Using the State Pattern will typically result in a greater number of classes in your design.
        10- State classes may be shared among Context instances.

Chapter 11 Proxy Pattern
    BULLET POINTS
        1- The Proxy Pattern provides a representative for another object in order to control the client’s access to it. There are a number of ways it can manage that access.
        2- A Remote Proxy manages interaction between a client and a remote object.
        3- A Virtual Proxy controls access to an object that is expensive to instantiate.
        4- A Protection Proxy controls access to the methods of an object based on the caller.
        5- Many other variants of the Proxy Pattern exist including caching proxies, synchronization proxies, firewall proxies, copy-on-write proxies, and so on.
        6- Proxy is structurally similar to Decorator, but the two differ in their purpose.
        7- The Decorator Pattern adds behavior to an object, while a Proxy controls access.
        8- Java’s built-in support for Proxy can build a dynamic proxy class on demand and dispatch all calls on it to a handler of your choosing.
        9- Like any wrapper, proxies will increase the number of classes and objects in your designs.

Chapter 12 Compound Patterns
    BULLET POINTS
        1- The Model View Controller Pattern (MVC) is a compound pattern consisting of the Observer, Strategy and Composite patterns.
        2- The model makes use of the Observer Pattern so that it can keep observers updated yet stay decoupled from them.
        3- The controller is the strategy for the view. The view can use different implementations of the controller to get different behavior.
        4- The view uses the Composite Pattern to implement the user interface, which usually consists of nested components like panels, frames and buttons.
        5- These patterns work together to decouple the three players in the MVC model, which keeps designs clear and flexible.
        6- The Adapter Pattern can be used to adapt a new model to an existing view and controller.
        7- Model 2 is an adaptation of MVC for web applications.
        8- In Model 2, the controller is implemented as a servlet and JSP & HTML implement the view.